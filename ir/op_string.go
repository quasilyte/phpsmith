// Code generated by "stringer -type Op -trimprefix Op"; DO NOT EDIT.

package ir

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpInvalid-0]
	_ = x[OpBad-1]
	_ = x[OpBreak-2]
	_ = x[OpContinue-3]
	_ = x[OpIf-4]
	_ = x[OpIfElse-5]
	_ = x[OpWhile-6]
	_ = x[OpDoWhile-7]
	_ = x[OpBlock-8]
	_ = x[OpReturn-9]
	_ = x[OpReturnVoid-10]
	_ = x[OpEcho-11]
	_ = x[OpParens-12]
	_ = x[OpAssign-13]
	_ = x[OpAssignModify-14]
	_ = x[OpBoolLit-15]
	_ = x[OpIntLit-16]
	_ = x[OpFloatLit-17]
	_ = x[OpStringLit-18]
	_ = x[OpArrayLit-19]
	_ = x[OpVar-20]
	_ = x[OpName-21]
	_ = x[OpNot-22]
	_ = x[OpProp-23]
	_ = x[OpIndex-24]
	_ = x[OpNegation-25]
	_ = x[OpUnaryPlus-26]
	_ = x[OpConcat-27]
	_ = x[OpAdd-28]
	_ = x[OpSub-29]
	_ = x[OpDiv-30]
	_ = x[OpMul-31]
	_ = x[OpMod-32]
	_ = x[OpExp-33]
	_ = x[OpAnd-34]
	_ = x[OpAndWord-35]
	_ = x[OpOr-36]
	_ = x[OpOrWord-37]
	_ = x[OpXorWord-38]
	_ = x[OpTernary-39]
	_ = x[OpCall-40]
	_ = x[OpLess-41]
	_ = x[OpLessOrEqual-42]
	_ = x[OpGreater-43]
	_ = x[OpGreaterOrEqual-44]
	_ = x[OpEqual2-45]
	_ = x[OpFloatEqual2-46]
	_ = x[OpEqual3-47]
	_ = x[OpFloatEqual3-48]
	_ = x[OpNotEqual2-49]
	_ = x[OpNotFloatEqual2-50]
	_ = x[OpNotEqual3-51]
	_ = x[OpNotFloatEqual3-52]
	_ = x[OpSpaceship-53]
	_ = x[OpPostInc-54]
	_ = x[OpPreInc-55]
	_ = x[OpPostDec-56]
	_ = x[OpPreDec-57]
	_ = x[OpCast-58]
	_ = x[OpBitAnd-59]
	_ = x[OpBitOr-60]
	_ = x[OpBitXor-61]
	_ = x[OpBitNot-62]
	_ = x[OpBitShiftLeft-63]
	_ = x[OpBitShiftRight-64]
	_ = x[OpNullCoalesce-65]
}

const _Op_name = "InvalidBadBreakContinueIfIfElseWhileDoWhileBlockReturnReturnVoidEchoParensAssignAssignModifyBoolLitIntLitFloatLitStringLitArrayLitVarNameNotPropIndexNegationUnaryPlusConcatAddSubDivMulModExpAndAndWordOrOrWordXorWordTernaryCallLessLessOrEqualGreaterGreaterOrEqualEqual2FloatEqual2Equal3FloatEqual3NotEqual2NotFloatEqual2NotEqual3NotFloatEqual3SpaceshipPostIncPreIncPostDecPreDecCastBitAndBitOrBitXorBitNotBitShiftLeftBitShiftRightNullCoalesce"

var _Op_index = [...]uint16{0, 7, 10, 15, 23, 25, 31, 36, 43, 48, 54, 64, 68, 74, 80, 92, 99, 105, 113, 122, 130, 133, 137, 140, 144, 149, 157, 166, 172, 175, 178, 181, 184, 187, 190, 193, 200, 202, 208, 215, 222, 226, 230, 241, 248, 262, 268, 279, 285, 296, 305, 319, 328, 342, 351, 358, 364, 371, 377, 381, 387, 392, 398, 404, 416, 429, 441}

func (i Op) String() string {
	if i < 0 || i >= Op(len(_Op_index)-1) {
		return "Op(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
