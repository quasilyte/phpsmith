// Code generated by "stringer -type Op -trimprefix Op"; DO NOT EDIT.

package ir

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpInvalid-0]
	_ = x[OpBad-1]
	_ = x[OpBreak-2]
	_ = x[OpContinue-3]
	_ = x[OpIf-4]
	_ = x[OpIfElse-5]
	_ = x[OpSwitch-6]
	_ = x[OpCase-7]
	_ = x[OpDefaultCase-8]
	_ = x[OpWhile-9]
	_ = x[OpDoWhile-10]
	_ = x[OpBlock-11]
	_ = x[OpReturn-12]
	_ = x[OpReturnVoid-13]
	_ = x[OpEcho-14]
	_ = x[OpParens-15]
	_ = x[OpAssign-16]
	_ = x[OpAssignModify-17]
	_ = x[OpBoolLit-18]
	_ = x[OpIntLit-19]
	_ = x[OpFloatLit-20]
	_ = x[OpStringLit-21]
	_ = x[OpArrayLit-22]
	_ = x[OpVar-23]
	_ = x[OpName-24]
	_ = x[OpNot-25]
	_ = x[OpProp-26]
	_ = x[OpIndex-27]
	_ = x[OpNegation-28]
	_ = x[OpUnaryPlus-29]
	_ = x[OpConcat-30]
	_ = x[OpAdd-31]
	_ = x[OpSub-32]
	_ = x[OpDiv-33]
	_ = x[OpMul-34]
	_ = x[OpMod-35]
	_ = x[OpExp-36]
	_ = x[OpAnd-37]
	_ = x[OpAndWord-38]
	_ = x[OpOr-39]
	_ = x[OpOrWord-40]
	_ = x[OpXorWord-41]
	_ = x[OpTernary-42]
	_ = x[OpCall-43]
	_ = x[OpLess-44]
	_ = x[OpLessOrEqual-45]
	_ = x[OpGreater-46]
	_ = x[OpGreaterOrEqual-47]
	_ = x[OpEqual2-48]
	_ = x[OpFloatEqual2-49]
	_ = x[OpEqual3-50]
	_ = x[OpFloatEqual3-51]
	_ = x[OpNotEqual2-52]
	_ = x[OpNotFloatEqual2-53]
	_ = x[OpNotEqual3-54]
	_ = x[OpNotFloatEqual3-55]
	_ = x[OpSpaceship-56]
	_ = x[OpPostInc-57]
	_ = x[OpPreInc-58]
	_ = x[OpPostDec-59]
	_ = x[OpPreDec-60]
	_ = x[OpCast-61]
	_ = x[OpBitAnd-62]
	_ = x[OpBitOr-63]
	_ = x[OpBitXor-64]
	_ = x[OpBitNot-65]
	_ = x[OpBitShiftLeft-66]
	_ = x[OpBitShiftRight-67]
	_ = x[OpNullCoalesce-68]
}

const _Op_name = "InvalidBadBreakContinueIfIfElseSwitchCaseDefaultCaseWhileDoWhileBlockReturnReturnVoidEchoParensAssignAssignModifyBoolLitIntLitFloatLitStringLitArrayLitVarNameNotPropIndexNegationUnaryPlusConcatAddSubDivMulModExpAndAndWordOrOrWordXorWordTernaryCallLessLessOrEqualGreaterGreaterOrEqualEqual2FloatEqual2Equal3FloatEqual3NotEqual2NotFloatEqual2NotEqual3NotFloatEqual3SpaceshipPostIncPreIncPostDecPreDecCastBitAndBitOrBitXorBitNotBitShiftLeftBitShiftRightNullCoalesce"

var _Op_index = [...]uint16{0, 7, 10, 15, 23, 25, 31, 37, 41, 52, 57, 64, 69, 75, 85, 89, 95, 101, 113, 120, 126, 134, 143, 151, 154, 158, 161, 165, 170, 178, 187, 193, 196, 199, 202, 205, 208, 211, 214, 221, 223, 229, 236, 243, 247, 251, 262, 269, 283, 289, 300, 306, 317, 326, 340, 349, 363, 372, 379, 385, 392, 398, 402, 408, 413, 419, 425, 437, 450, 462}

func (i Op) String() string {
	if i < 0 || i >= Op(len(_Op_index)-1) {
		return "Op(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
