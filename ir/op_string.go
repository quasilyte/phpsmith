// Code generated by "stringer -type Op -trimprefix Op"; DO NOT EDIT.

package ir

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpInvalid-0]
	_ = x[OpBad-1]
	_ = x[OpBreak-2]
	_ = x[OpContinue-3]
	_ = x[OpIf-4]
	_ = x[OpIfElse-5]
	_ = x[OpWhile-6]
	_ = x[OpDoWhile-7]
	_ = x[OpBlock-8]
	_ = x[OpReturn-9]
	_ = x[OpReturnVoid-10]
	_ = x[OpEcho-11]
	_ = x[OpParens-12]
	_ = x[OpAssign-13]
	_ = x[OpAssignModify-14]
	_ = x[OpBoolLit-15]
	_ = x[OpIntLit-16]
	_ = x[OpFloatLit-17]
	_ = x[OpStringLit-18]
	_ = x[OpVar-19]
	_ = x[OpName-20]
	_ = x[OpNot-21]
	_ = x[OpProp-22]
	_ = x[OpIndex-23]
	_ = x[OpConcat-24]
	_ = x[OpAdd-25]
	_ = x[OpSub-26]
	_ = x[OpAnd-27]
	_ = x[OpOr-28]
	_ = x[OpTernary-29]
	_ = x[OpCall-30]
}

const _Op_name = "InvalidBadBreakContinueIfIfElseWhileDoWhileBlockReturnReturnVoidEchoParensAssignAssignModifyBoolLitIntLitFloatLitStringLitVarNameNotPropIndexConcatAddSubAndOrTernaryCall"

var _Op_index = [...]uint8{0, 7, 10, 15, 23, 25, 31, 36, 43, 48, 54, 64, 68, 74, 80, 92, 99, 105, 113, 122, 125, 129, 132, 136, 141, 147, 150, 153, 156, 158, 165, 169}

func (i Op) String() string {
	if i < 0 || i >= Op(len(_Op_index)-1) {
		return "Op(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
