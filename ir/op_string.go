// Code generated by "stringer -type Op -trimprefix Op"; DO NOT EDIT.

package ir

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpInvalid-0]
	_ = x[OpBad-1]
	_ = x[OpBreak-2]
	_ = x[OpContinue-3]
	_ = x[OpIf-4]
	_ = x[OpIfElse-5]
	_ = x[OpSwitch-6]
	_ = x[OpCase-7]
	_ = x[OpDefaultCase-8]
	_ = x[OpWhile-9]
	_ = x[OpDoWhile-10]
	_ = x[OpBlock-11]
	_ = x[OpReturn-12]
	_ = x[OpReturnVoid-13]
	_ = x[OpEcho-14]
	_ = x[OpParens-15]
	_ = x[OpAssign-16]
	_ = x[OpAssignModify-17]
	_ = x[OpBoolLit-18]
	_ = x[OpIntLit-19]
	_ = x[OpFloatLit-20]
	_ = x[OpStringLit-21]
	_ = x[OpInterpolatedString-22]
	_ = x[OpArrayLit-23]
	_ = x[OpVar-24]
	_ = x[OpName-25]
	_ = x[OpNot-26]
	_ = x[OpProp-27]
	_ = x[OpIndex-28]
	_ = x[OpNegation-29]
	_ = x[OpUnaryPlus-30]
	_ = x[OpConcat-31]
	_ = x[OpAdd-32]
	_ = x[OpSub-33]
	_ = x[OpDiv-34]
	_ = x[OpMul-35]
	_ = x[OpMod-36]
	_ = x[OpExp-37]
	_ = x[OpAnd-38]
	_ = x[OpAndWord-39]
	_ = x[OpOr-40]
	_ = x[OpOrWord-41]
	_ = x[OpXorWord-42]
	_ = x[OpTernary-43]
	_ = x[OpCall-44]
	_ = x[OpLess-45]
	_ = x[OpLessOrEqual-46]
	_ = x[OpGreater-47]
	_ = x[OpGreaterOrEqual-48]
	_ = x[OpEqual2-49]
	_ = x[OpFloatEqual2-50]
	_ = x[OpEqual3-51]
	_ = x[OpFloatEqual3-52]
	_ = x[OpNotEqual2-53]
	_ = x[OpNotFloatEqual2-54]
	_ = x[OpNotEqual3-55]
	_ = x[OpNotFloatEqual3-56]
	_ = x[OpSpaceship-57]
	_ = x[OpPostInc-58]
	_ = x[OpPreInc-59]
	_ = x[OpPostDec-60]
	_ = x[OpPreDec-61]
	_ = x[OpCast-62]
	_ = x[OpBitAnd-63]
	_ = x[OpBitOr-64]
	_ = x[OpBitXor-65]
	_ = x[OpBitNot-66]
	_ = x[OpBitShiftLeft-67]
	_ = x[OpBitShiftRight-68]
	_ = x[OpNullCoalesce-69]
}

const _Op_name = "InvalidBadBreakContinueIfIfElseSwitchCaseDefaultCaseWhileDoWhileBlockReturnReturnVoidEchoParensAssignAssignModifyBoolLitIntLitFloatLitStringLitInterpolatedStringArrayLitVarNameNotPropIndexNegationUnaryPlusConcatAddSubDivMulModExpAndAndWordOrOrWordXorWordTernaryCallLessLessOrEqualGreaterGreaterOrEqualEqual2FloatEqual2Equal3FloatEqual3NotEqual2NotFloatEqual2NotEqual3NotFloatEqual3SpaceshipPostIncPreIncPostDecPreDecCastBitAndBitOrBitXorBitNotBitShiftLeftBitShiftRightNullCoalesce"

var _Op_index = [...]uint16{0, 7, 10, 15, 23, 25, 31, 37, 41, 52, 57, 64, 69, 75, 85, 89, 95, 101, 113, 120, 126, 134, 143, 161, 169, 172, 176, 179, 183, 188, 196, 205, 211, 214, 217, 220, 223, 226, 229, 232, 239, 241, 247, 254, 261, 265, 269, 280, 287, 301, 307, 318, 324, 335, 344, 358, 367, 381, 390, 397, 403, 410, 416, 420, 426, 431, 437, 443, 455, 468, 480}

func (i Op) String() string {
	if i < 0 || i >= Op(len(_Op_index)-1) {
		return "Op(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
